/**
 * Order Details
 * Retrieve information about current and past orders.
 *
 * The version of the OpenAPI document: v3
 * Contact: api.contact@digikey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package net.jastrab.digikey.model.ordersupport

import com.fasterxml.jackson.annotation.JsonProperty

/**
 * OrderStatus response model returned from v3/Status/{SalesorderId} endpoint
 * @param salesorderId Id for this order
 * @param customerId Your Digi-Key customer Id
 * @param billingAccount Net Terms billing account number used for the order.
 * @param email Email Address
 * @param purchaseOrder Freeform purchase order
 * @param paymentMethod Payment method for the order
 * @param shippingMethod Shipping method requested
 * @param backorderShippingMethod Backorder shipping method requested
 * @param shipperAccountNumber Account number with the shipper
 * @param backorderShipperAccountNumber Account number with the backorder shipper
 * @param shipmentType Can be Immediate, Double or Single. If Immediate, all items will ship as available. If Double, all items immediately available will ship, and other items will be held untill all are available. If Single, entire order is held untill all items are available.
 * @param currency ISO code for currency used in the order.
 * @param shippingAddress
 * @param billingAddress
 * @param shippingDetails List of shipping details
 * @param lineItems List of line items
 */

data class OrderStatus(
    /* Id for this order */
    @JsonProperty("SalesorderId")
    val salesorderId: Int? = null,
    /* Your Digi-Key customer Id */
    @JsonProperty("CustomerId")
    val customerId: Int? = null,
    /* Net Terms billing account number used for the order. */
    @JsonProperty("BillingAccount")
    val billingAccount: Int? = null,
    /* Email Address */
    @JsonProperty("Email")
    val email: String? = null,
    /* Freeform purchase order */
    @JsonProperty("PurchaseOrder")
    val purchaseOrder: String? = null,
    /* Payment method for the order */
    @JsonProperty("PaymentMethod")
    val paymentMethod: String? = null,
    /* Shipping method requested */
    @JsonProperty("ShippingMethod")
    val shippingMethod: String? = null,
    /* Backorder shipping method requested */
    @JsonProperty("BackorderShippingMethod")
    val backorderShippingMethod: String? = null,
    /* Account number with the shipper */
    @JsonProperty("ShipperAccountNumber")
    val shipperAccountNumber: String? = null,
    /* Account number with the backorder shipper */
    @JsonProperty("BackorderShipperAccountNumber")
    val backorderShipperAccountNumber: String? = null,
    /* Can be Immediate, Double or Single. If Immediate, all items will ship as available. If Double, all items immediately available will ship, and other items will be held untill all are available. If Single, entire order is held untill all items are available. */
    @JsonProperty("ShipmentType")
    val shipmentType: String? = null,
    /* ISO code for currency used in the order. */
    @JsonProperty("Currency")
    val currency: String? = null,
    @JsonProperty("ShippingAddress")
    val shippingAddress: Address? = null,
    @JsonProperty("BillingAddress")
    val billingAddress: Address? = null,
    /* List of shipping details */
    @JsonProperty("ShippingDetails")
    val shippingDetails: List<ShippingDetail> = ArrayList(),
    /* List of line items */
    @JsonProperty("LineItems")
    val lineItems: List<LineItem> = ArrayList()
)

